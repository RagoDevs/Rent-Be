// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: houses.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createHouse = `-- name: CreateHouse :one
INSERT INTO house (location, block, partition, occupied) VALUES ($1,$2,$3,$4) RETURNING id
`

type CreateHouseParams struct {
	Location  string `json:"location"`
	Block     string `json:"block"`
	Partition int16  `json:"partition"`
	Occupied  bool   `json:"occupied"`
}

func (q *Queries) CreateHouse(ctx context.Context, arg CreateHouseParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createHouse,
		arg.Location,
		arg.Block,
		arg.Partition,
		arg.Occupied,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getHouseById = `-- name: GetHouseById :one
SELECT id,location, block, partition , Occupied, version FROM house WHERE id = $1
`

func (q *Queries) GetHouseById(ctx context.Context, id uuid.UUID) (House, error) {
	row := q.db.QueryRowContext(ctx, getHouseById, id)
	var i House
	err := row.Scan(
		&i.ID,
		&i.Location,
		&i.Block,
		&i.Partition,
		&i.Occupied,
		&i.Version,
	)
	return i, err
}

const getHouses = `-- name: GetHouses :many
SELECT id,location, block, partition , occupied FROM house
`

type GetHousesRow struct {
	ID        uuid.UUID `json:"id"`
	Location  string    `json:"location"`
	Block     string    `json:"block"`
	Partition int16     `json:"partition"`
	Occupied  bool      `json:"occupied"`
}

func (q *Queries) GetHouses(ctx context.Context) ([]GetHousesRow, error) {
	rows, err := q.db.QueryContext(ctx, getHouses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetHousesRow{}
	for rows.Next() {
		var i GetHousesRow
		if err := rows.Scan(
			&i.ID,
			&i.Location,
			&i.Block,
			&i.Partition,
			&i.Occupied,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateHouseById = `-- name: UpdateHouseById :exec
UPDATE house
SET location = $1, block = $2, partition = $3, occupied = $4, 
version = uuid_generate_v4()
WHERE id = $5 AND version = $6
`

type UpdateHouseByIdParams struct {
	Location  string    `json:"location"`
	Block     string    `json:"block"`
	Partition int16     `json:"partition"`
	Occupied  bool      `json:"occupied"`
	ID        uuid.UUID `json:"id"`
	Version   uuid.UUID `json:"version"`
}

func (q *Queries) UpdateHouseById(ctx context.Context, arg UpdateHouseByIdParams) error {
	_, err := q.db.ExecContext(ctx, updateHouseById,
		arg.Location,
		arg.Block,
		arg.Partition,
		arg.Occupied,
		arg.ID,
		arg.Version,
	)
	return err
}
