// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: tenants.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createTenant = `-- name: CreateTenant :exec
INSERT INTO TENANT
(first_name, last_name, house_id, phone, personal_id_type,personal_id, active, sos) 
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
`

type CreateTenantParams struct {
	FirstName      string    `json:"first_name"`
	LastName       string    `json:"last_name"`
	HouseID        uuid.UUID `json:"house_id"`
	Phone          string    `json:"phone"`
	PersonalIDType string    `json:"personal_id_type"`
	PersonalID     string    `json:"personal_id"`
	Active         bool      `json:"active"`
	Sos            time.Time `json:"sos"`
}

func (q *Queries) CreateTenant(ctx context.Context, arg CreateTenantParams) error {
	_, err := q.db.ExecContext(ctx, createTenant,
		arg.FirstName,
		arg.LastName,
		arg.HouseID,
		arg.Phone,
		arg.PersonalIDType,
		arg.PersonalID,
		arg.Active,
		arg.Sos,
	)
	return err
}

const getHouseByIdWithTenant = `-- name: GetHouseByIdWithTenant :one
SELECT h.id,h.location, h.block, h.partition , h.Occupied, 
CONCAT(t.first_name || ' ' || t.last_name) AS tenant_name, t.id AS tenant_id
FROM tenant t
Join house h ON h.id = t.house_id
WHERE h.id = $1
`

type GetHouseByIdWithTenantRow struct {
	ID         uuid.UUID   `json:"id"`
	Location   string      `json:"location"`
	Block      string      `json:"block"`
	Partition  int16       `json:"partition"`
	Occupied   bool        `json:"occupied"`
	TenantName interface{} `json:"tenant_name"`
	TenantID   uuid.UUID   `json:"tenant_id"`
}

func (q *Queries) GetHouseByIdWithTenant(ctx context.Context, id uuid.UUID) (GetHouseByIdWithTenantRow, error) {
	row := q.db.QueryRowContext(ctx, getHouseByIdWithTenant, id)
	var i GetHouseByIdWithTenantRow
	err := row.Scan(
		&i.ID,
		&i.Location,
		&i.Block,
		&i.Partition,
		&i.Occupied,
		&i.TenantName,
		&i.TenantID,
	)
	return i, err
}

const getTenantById = `-- name: GetTenantById :one
SELECT id, first_name, last_name, phone, house_id, personal_id_type, personal_id, photo, active, sos, eos, version FROM tenant
WHERE id = $1
`

func (q *Queries) GetTenantById(ctx context.Context, id uuid.UUID) (Tenant, error) {
	row := q.db.QueryRowContext(ctx, getTenantById, id)
	var i Tenant
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Phone,
		&i.HouseID,
		&i.PersonalIDType,
		&i.PersonalID,
		&i.Photo,
		&i.Active,
		&i.Sos,
		&i.Eos,
		&i.Version,
	)
	return i, err
}

const getTenantByIdWithHouse = `-- name: GetTenantByIdWithHouse :one
SELECT t.id, t.first_name, t.last_name, t.house_id,h.location, h.block, h.partition, 
t.phone, t.personal_id_type,t.personal_id, t.active, t.sos, t.version 
FROM tenant t
JOIN house h ON t.house_id = h.id
WHERE t.id = $1
`

type GetTenantByIdWithHouseRow struct {
	ID             uuid.UUID `json:"id"`
	FirstName      string    `json:"first_name"`
	LastName       string    `json:"last_name"`
	HouseID        uuid.UUID `json:"house_id"`
	Location       string    `json:"location"`
	Block          string    `json:"block"`
	Partition      int16     `json:"partition"`
	Phone          string    `json:"phone"`
	PersonalIDType string    `json:"personal_id_type"`
	PersonalID     string    `json:"personal_id"`
	Active         bool      `json:"active"`
	Sos            time.Time `json:"sos"`
	Version        uuid.UUID `json:"version"`
}

func (q *Queries) GetTenantByIdWithHouse(ctx context.Context, id uuid.UUID) (GetTenantByIdWithHouseRow, error) {
	row := q.db.QueryRowContext(ctx, getTenantByIdWithHouse, id)
	var i GetTenantByIdWithHouseRow
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.HouseID,
		&i.Location,
		&i.Block,
		&i.Partition,
		&i.Phone,
		&i.PersonalIDType,
		&i.PersonalID,
		&i.Active,
		&i.Sos,
		&i.Version,
	)
	return i, err
}

const getTenants = `-- name: GetTenants :many
SELECT id, first_name, last_name, house_id, 
phone, personal_id_type,personal_id, active, sos
FROM tenant
`

type GetTenantsRow struct {
	ID             uuid.UUID `json:"id"`
	FirstName      string    `json:"first_name"`
	LastName       string    `json:"last_name"`
	HouseID        uuid.UUID `json:"house_id"`
	Phone          string    `json:"phone"`
	PersonalIDType string    `json:"personal_id_type"`
	PersonalID     string    `json:"personal_id"`
	Active         bool      `json:"active"`
	Sos            time.Time `json:"sos"`
}

func (q *Queries) GetTenants(ctx context.Context) ([]GetTenantsRow, error) {
	rows, err := q.db.QueryContext(ctx, getTenants)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetTenantsRow{}
	for rows.Next() {
		var i GetTenantsRow
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.HouseID,
			&i.Phone,
			&i.PersonalIDType,
			&i.PersonalID,
			&i.Active,
			&i.Sos,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTenant = `-- name: UpdateTenant :exec
UPDATE tenant 
SET first_name = $1, last_name = $2 ,house_id = $3, phone = $4 ,personal_id_type = $5 ,personal_id = $6 ,active = $7, sos=$8 ,eos = $9, version = uuid_generate_v4()
WHERE id = $10 AND version = $11
`

type UpdateTenantParams struct {
	FirstName      string       `json:"first_name"`
	LastName       string       `json:"last_name"`
	HouseID        uuid.UUID    `json:"house_id"`
	Phone          string       `json:"phone"`
	PersonalIDType string       `json:"personal_id_type"`
	PersonalID     string       `json:"personal_id"`
	Active         bool         `json:"active"`
	Sos            time.Time    `json:"sos"`
	Eos            sql.NullTime `json:"eos"`
	ID             uuid.UUID    `json:"id"`
	Version        uuid.UUID    `json:"version"`
}

func (q *Queries) UpdateTenant(ctx context.Context, arg UpdateTenantParams) error {
	_, err := q.db.ExecContext(ctx, updateTenant,
		arg.FirstName,
		arg.LastName,
		arg.HouseID,
		arg.Phone,
		arg.PersonalIDType,
		arg.PersonalID,
		arg.Active,
		arg.Sos,
		arg.Eos,
		arg.ID,
		arg.Version,
	)
	return err
}
